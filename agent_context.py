# -*- coding: utf-8 -*-
"""Agent_context.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FxIH_-wMjnZ8IwDvDLQnvv2B4p-hXCgW
"""

!pip install -Uq openai-agents

import nest_asyncio
nest_asyncio.apply()

from pydantic import BaseModel
from agents import (
    AsyncOpenAI,
    OpenAIChatCompletionsModel,
    RunConfig
)
from google.colab import userdata

gemini_api_key = userdata.get("GEMINI_NEW_KEY")


# Check if the API key is present; if not, raise an error
if not gemini_api_key:
    raise ValueError("GEMINI_API_KEY is not set. Please ensure it is defined in your .env file.")

#Reference: https://ai.google.dev/gemini-api/docs/openai
external_client = AsyncOpenAI(
    api_key=gemini_api_key,
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/",
)

model = OpenAIChatCompletionsModel(
    model="gemini-2.0-flash",
    openai_client=external_client
)

from agents import set_default_openai_client, set_tracing_disabled
set_default_openai_client(external_client)
set_tracing_disabled(True)

import asyncio
from dataclasses import dataclass   #helps us create data centric classes quickly
from agents import Agent, Runner, RunContextWrapper, function_tool

@dataclass
class UserInfo1:
    name: str
    uid: int
    location: str = "Pakistan"


@function_tool                                  #it's a tool
async def fetch_user_age(wrapper : RunContextWrapper[UserInfo1]) -> str:
    '''Returns the age of the user.'''
    return f"User {wrapper.context.name} is 30 years old"

@function_tool                                   #it's a tool
async def fetch_user_location(wrapper : RunContextWrapper[UserInfo1]) -> str:
    '''Returns the location of the user.'''
    return f"User {wrapper.context.name} is from {wrapper.context.location}"

async def main():
    user_info = UserInfo1(name="Nadia Arshad", uid=12345) #initialization of class UserInfo1

    agent = Agent[UserInfo1](
        name="Assistant",
        tools=[fetch_user_age,fetch_user_location],
        model=model
    )

    result = await Runner.run(
        starting_agent=agent,
        input= "What is user's location?",
        context=user_info,
    )

    print(result.final_output)
    # The user John is 47 years old.

if __name__ == "__main__":
    asyncio.run(main())

